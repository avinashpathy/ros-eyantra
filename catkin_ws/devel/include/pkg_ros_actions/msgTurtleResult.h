// Generated by gencpp from file pkg_ros_actions/msgTurtleResult.msg
// DO NOT EDIT!


#ifndef PKG_ROS_ACTIONS_MESSAGE_MSGTURTLERESULT_H
#define PKG_ROS_ACTIONS_MESSAGE_MSGTURTLERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg_ros_actions
{
template <class ContainerAllocator>
struct msgTurtleResult_
{
  typedef msgTurtleResult_<ContainerAllocator> Type;

  msgTurtleResult_()
    : final_x(0)
    , final_y(0)
    , final_theta(0)  {
    }
  msgTurtleResult_(const ContainerAllocator& _alloc)
    : final_x(0)
    , final_y(0)
    , final_theta(0)  {
  (void)_alloc;
    }



   typedef int8_t _final_x_type;
  _final_x_type final_x;

   typedef int8_t _final_y_type;
  _final_y_type final_y;

   typedef int8_t _final_theta_type;
  _final_theta_type final_theta;





  typedef boost::shared_ptr< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> const> ConstPtr;

}; // struct msgTurtleResult_

typedef ::pkg_ros_actions::msgTurtleResult_<std::allocator<void> > msgTurtleResult;

typedef boost::shared_ptr< ::pkg_ros_actions::msgTurtleResult > msgTurtleResultPtr;
typedef boost::shared_ptr< ::pkg_ros_actions::msgTurtleResult const> msgTurtleResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pkg_ros_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'pkg_ros_actions': ['/home/avinash/catkin_ws/devel/.private/pkg_ros_actions/share/pkg_ros_actions/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcbe64f721494990ab374cf224b365bf";
  }

  static const char* value(const ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcbe64f721494990ULL;
  static const uint64_t static_value2 = 0xab374cf224b365bfULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_ros_actions/msgTurtleResult";
  }

  static const char* value(const ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# result\n"
"int8 final_x\n"
"int8 final_y\n"
"int8 final_theta\n"
;
  }

  static const char* value(const ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.final_x);
      stream.next(m.final_y);
      stream.next(m.final_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msgTurtleResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_ros_actions::msgTurtleResult_<ContainerAllocator>& v)
  {
    s << indent << "final_x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.final_x);
    s << indent << "final_y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.final_y);
    s << indent << "final_theta: ";
    Printer<int8_t>::stream(s, indent + "  ", v.final_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_ROS_ACTIONS_MESSAGE_MSGTURTLERESULT_H
