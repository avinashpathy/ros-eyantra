#! /usr/bin/env python

import rospy
import sys
import copy

import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import actionlib


class CartesianPath:

    # Constructor
    def __init__(self):

        rospy.init_node('node_eg5_waypoints', anonymous=True)

        self._planning_group = "ur5_1_planning_group"
        self._commander = moveit_commander.roscpp_initialize(sys.argv)
        self._robot = moveit_commander.RobotCommander()
        self._scene = moveit_commander.PlanningSceneInterface()
        self._group = moveit_commander.MoveGroupCommander(self._planning_group)
        self._display_trajectory_publisher = rospy.Publisher(
            '/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=1)

        self._exectute_trajectory_client = actionlib.SimpleActionClient(
            'execute_trajectory', moveit_msgs.msg.ExecuteTrajectoryAction)
        self._exectute_trajectory_client.wait_for_server()

        self._planning_frame = self._group.get_planning_frame()
        self._eef_link = self._group.get_end_effector_link()
        self._group_names = self._robot.get_group_names()

        rospy.loginfo('\033[94m' + " >>> Init done." + '\033[0m')


  

    
    def go_to_pose(self, arg_pose):

        pose_values = self._group.get_current_pose().pose
        rospy.loginfo('\033[94m' + ">>> Current Pose:" + '\033[0m')
        rospy.loginfo(pose_values)

        self._group.set_pose_target(arg_pose)
        flag_plan = self._group.go(wait=True)  # wait=False for Async Move

        pose_values = self._group.get_current_pose().pose
        rospy.loginfo('\033[94m' + ">>> Final Pose:" + '\033[0m')
        rospy.loginfo(pose_values)

        list_joint_values = self._group.get_current_joint_values()
        rospy.loginfo('\033[94m' + ">>> Final Joint Values:" + '\033[0m')
        rospy.loginfo(list_joint_values)

        if (flag_plan == True):
            rospy.loginfo('\033[94m' + ">>> go_to_pose() Success" + '\033[0m')
        else:
            rospy.logerr(
                '\033[94m' + ">>> go_to_pose() Failed. Solution for Pose not Found." + '\033[0m')

        return flag_plan


    # Destructor
    def __del__(self):
        moveit_commander.roscpp_shutdown()
        rospy.loginfo(
            '\033[94m' + "Object of class CartesianPath Deleted." + '\033[0m')


def main():
    ur5 = CartesianPath()

   

    ur5_2_home_pose = geometry_msgs.msg.Pose()
    ur5_2_home_pose.position.x = -0.8
    ur5_2_home_pose.position.y = 0
    ur5_2_home_pose.position.z = 1 + vacuum_gripper_width + (box_length/2)
    # This to keep EE parallel to Ground Plane
    ur5_2_home_pose.orientation.x = -0.5
    ur5_2_home_pose.orientation.y = -0.5
    ur5_2_home_pose.orientation.z = 0.5
    ur5_2_home_pose.orientation.w = 0.5

    while not rospy.is_shutdown():
        # 1. Go to Home Position
        ur5.go_to_pose(ur5_2_home_pose)
        rospy.loginfo('\033[96m' + "Enter 'n' to go to next pose." + '\033[0m')
        inp = raw_input()

        # 2. Translate EE by 0.5m  in x
        rospy.loginfo('\033[94m' + "Translating EE by 0.5m in x from current position." + '\033[0m')
        ur5.ee_cartesian_translation(0.5, 0, 0)

        rospy.loginfo('\033[96m' + "Enter 'n' to go to next pose." + '\033[0m')
        inp = raw_input()
        
        # 3. Translate EE by 0.5m  in y
        rospy.loginfo('\033[94m' + "Translating EE by 0.5m in y from current position." + '\033[0m')
        ur5.ee_cartesian_translation(0, 0.5, 0)

        rospy.loginfo('\033[96m' + "Enter 'n' to go to next pose." + '\033[0m')
        inp = raw_input()
        
        # 4. Translate EE by 0.5m  in z
        rospy.loginfo('\033[94m' + "Translating EE by 0.5m in z from current position." + '\033[0m')
        ur5.ee_cartesian_translation(0, 0, 0.5)

        rospy.loginfo('\033[96m' + "Enter 'n' to go to home pose." + '\033[0m')
        inp = raw_input()
        
    del ur5


if __name__ == '__main__':
    main()

